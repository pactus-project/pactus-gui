name: Linux x86_64 AppImage Build & Release

on:
  push:
    tags:
      - 'v*'

env:
  LINUX_ASSETS_URL: "https://github.com/pactus-project/pactus/releases/download/v1.7.1/pactus-cli_1.7.1_linux_amd64.tar.gz"
  ARCHITECT: "x86_64"

permissions:
  contents: write

jobs:
  build-and-release-linux-amd64:
    outputs:
      tag_name: ${{ steps.tag_data.outputs.tag_name }}
      release_link: ${{ steps.prepare_links.outputs.release_link }}
      download_link: ${{ steps.prepare_links.outputs.download_link }}

    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.27.3'
          channel: 'stable'

      - name: 01 - Install Dependencies
        run: bash .github/scripts/linux/x86-appimage/01-install-dependencies.sh

      - name: 02 - Install Flutter Project Dependencies
        run: bash .github/scripts/linux/x86-appimage/02-install-flutter-deps.sh

      - name: 03 - Build Flutter Linux Bundle
        run: bash .github/scripts/linux/x86-appimage/03-build.sh

      - name: 04 - Extract daemon files
        run: bash .github/scripts/linux/x86-appimage/04-extract-daemon-files.sh

      - name: 04 - Prepare AppDir and Collect Files
        run: bash .github/scripts/linux/x86-appimage/05-prepare-appdir.sh

      - name: 05 - Download AppImage Tools
        run: bash .github/scripts/linux/x86-appimage/06-download-tools.sh

      - name: 07 - Build AppImage
        run: bash .github/scripts/linux/x86-appimage/07-build-appimage.sh

      - name: 08 - Test AppImage (headless)
        run: bash .github/scripts/linux/x86-appimage/08-test.sh

      - name: Upload Built AppImage
        uses: actions/upload-artifact@v4
        with:
          name: PactusGUI-AppImage
          path: ./*.AppImage

      - name: Get Tag Data
        id: tag_data
        run: |
          TAG_NAME=${GITHUB_REF#refs/tags/}
          FILE_NAME="pactus_gui-${TAG_NAME}-${ARCHITECT}.AppImage"
          TAG_MESSAGE=$(git tag -l --format='%(contents)' "$TAG_NAME" || echo "No release notes")
      
          # Escape for GitHub Actions output
          TAG_MESSAGE="${TAG_MESSAGE//'%'/'%25'}"
          TAG_MESSAGE="${TAG_MESSAGE//$'\n'/'%0A'}"
      
          echo "file_name=${FILE_NAME}" >> $GITHUB_OUTPUT
          echo "tag_name=${TAG_NAME}" >> $GITHUB_OUTPUT
          echo "tag_message=${TAG_MESSAGE}" >> $GITHUB_OUTPUT 

      - name: Create Release and Upload Assets
        id: release
        uses: softprops/action-gh-release@v2
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag_data.outputs.tag_name }}
          name: "Release ${{ steps.tag_data.outputs.tag_name }}"
          files: ${{ steps.tag_data.outputs.file_name }}
          draft: false
          prerelease: false
          generate_release_notes: true

      - name: Prepare Download and Release Links
        id: prepare_links
        run: |
          DOWNLOAD_LINK="https://github.com/${{ github.repository }}/releases/download/${{ steps.tag_data.outputs.tag_name }}/${{ steps.tag_data.outputs.file_name }}"
          RELEASE_LINK="https://github.com/${{ github.repository }}/releases/tag/${{ steps.tag_data.outputs.tag_name }}"
          echo "download_link=${DOWNLOAD_LINK}" >> $GITHUB_OUTPUT
          echo "release_link=${RELEASE_LINK}" >> $GITHUB_OUTPUT

  notify-linux:
    needs: build-and-release-linux-amd64
    runs-on: ubuntu-latest
    steps:
      - name: Send Discord Notification
        uses: Ilshidur/action-discord@master
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        with:
          args: |
            ðŸš€ **New Linux Release Available** 
            **Version:** ${{ needs.build-and-release-linux-amd64.outputs.tag_name }}
            **Download:** [AppImage](${{ needs.build-and-release-linux-amd64.outputs.download_link }})
            **Release Notes:** ${{ needs.build-and-release-linux-amd64.outputs.release_link }}

      - name: Send Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_MESSAGE: |
            :rocket: *Pactus GUI ${{ needs.build-and-release-linux-amd64.outputs.tag_name }} - Linux*
            â€¢ Download: <${{ needs.build-and-release-linux-amd64.outputs.download_link }}|AppImage>
            â€¢ Release: <${{ needs.build-and-release-linux-amd64.outputs.release_link }}|View details>